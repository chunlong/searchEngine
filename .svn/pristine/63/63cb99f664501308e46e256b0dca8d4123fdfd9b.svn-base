/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.xoa2.ntc.search;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UpdateFieldsRequest implements org.apache.thrift.TBase<UpdateFieldsRequest, UpdateFieldsRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateFieldsRequest");

  private static final org.apache.thrift.protocol.TField FIELD_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("field_value", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UpdateFieldsRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UpdateFieldsRequestTupleSchemeFactory());
  }

  public Map<String,String> field_value; // required
  public int id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD_VALUE((short)1, "field_value"),
    ID((short)2, "id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD_VALUE
          return FIELD_VALUE;
        case 2: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD_VALUE, new org.apache.thrift.meta_data.FieldMetaData("field_value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateFieldsRequest.class, metaDataMap);
  }

  public UpdateFieldsRequest() {
  }

  public UpdateFieldsRequest(
    Map<String,String> field_value,
    int id)
  {
    this();
    this.field_value = field_value;
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateFieldsRequest(UpdateFieldsRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetField_value()) {
      Map<String,String> __this__field_value = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.field_value.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__field_value_copy_key = other_element_key;

        String __this__field_value_copy_value = other_element_value;

        __this__field_value.put(__this__field_value_copy_key, __this__field_value_copy_value);
      }
      this.field_value = __this__field_value;
    }
    this.id = other.id;
  }

  public UpdateFieldsRequest deepCopy() {
    return new UpdateFieldsRequest(this);
  }

  @Override
  public void clear() {
    this.field_value = null;
    setIdIsSet(false);
    this.id = 0;
  }

  public int getField_valueSize() {
    return (this.field_value == null) ? 0 : this.field_value.size();
  }

  public void putToField_value(String key, String val) {
    if (this.field_value == null) {
      this.field_value = new HashMap<String,String>();
    }
    this.field_value.put(key, val);
  }

  public Map<String,String> getField_value() {
    return this.field_value;
  }

  public UpdateFieldsRequest setField_value(Map<String,String> field_value) {
    this.field_value = field_value;
    return this;
  }

  public void unsetField_value() {
    this.field_value = null;
  }

  /** Returns true if field field_value is set (has been assigned a value) and false otherwise */
  public boolean isSetField_value() {
    return this.field_value != null;
  }

  public void setField_valueIsSet(boolean value) {
    if (!value) {
      this.field_value = null;
    }
  }

  public int getId() {
    return this.id;
  }

  public UpdateFieldsRequest setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIELD_VALUE:
      if (value == null) {
        unsetField_value();
      } else {
        setField_value((Map<String,String>)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD_VALUE:
      return getField_value();

    case ID:
      return Integer.valueOf(getId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIELD_VALUE:
      return isSetField_value();
    case ID:
      return isSetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateFieldsRequest)
      return this.equals((UpdateFieldsRequest)that);
    return false;
  }

  public boolean equals(UpdateFieldsRequest that) {
    if (that == null)
      return false;

    boolean this_present_field_value = true && this.isSetField_value();
    boolean that_present_field_value = true && that.isSetField_value();
    if (this_present_field_value || that_present_field_value) {
      if (!(this_present_field_value && that_present_field_value))
        return false;
      if (!this.field_value.equals(that.field_value))
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_field_value = true && (isSetField_value());
    builder.append(present_field_value);
    if (present_field_value)
      builder.append(field_value);

    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    return builder.toHashCode();
  }

  public int compareTo(UpdateFieldsRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UpdateFieldsRequest typedOther = (UpdateFieldsRequest)other;

    lastComparison = Boolean.valueOf(isSetField_value()).compareTo(typedOther.isSetField_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field_value, typedOther.field_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UpdateFieldsRequest(");
    boolean first = true;

    sb.append("field_value:");
    if (this.field_value == null) {
      sb.append("null");
    } else {
      sb.append(this.field_value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (field_value == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'field_value' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateFieldsRequestStandardSchemeFactory implements SchemeFactory {
    public UpdateFieldsRequestStandardScheme getScheme() {
      return new UpdateFieldsRequestStandardScheme();
    }
  }

  private static class UpdateFieldsRequestStandardScheme extends StandardScheme<UpdateFieldsRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateFieldsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.field_value = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  String _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.field_value.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setField_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateFieldsRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.field_value != null) {
        oprot.writeFieldBegin(FIELD_VALUE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.field_value.size()));
          for (Map.Entry<String, String> _iter4 : struct.field_value.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateFieldsRequestTupleSchemeFactory implements SchemeFactory {
    public UpdateFieldsRequestTupleScheme getScheme() {
      return new UpdateFieldsRequestTupleScheme();
    }
  }

  private static class UpdateFieldsRequestTupleScheme extends TupleScheme<UpdateFieldsRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateFieldsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.field_value.size());
        for (Map.Entry<String, String> _iter5 : struct.field_value.entrySet())
        {
          oprot.writeString(_iter5.getKey());
          oprot.writeString(_iter5.getValue());
        }
      }
      oprot.writeI32(struct.id);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateFieldsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.field_value = new HashMap<String,String>(2*_map6.size);
        for (int _i7 = 0; _i7 < _map6.size; ++_i7)
        {
          String _key8; // required
          String _val9; // required
          _key8 = iprot.readString();
          _val9 = iprot.readString();
          struct.field_value.put(_key8, _val9);
        }
      }
      struct.setField_valueIsSet(true);
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
    }
  }

}

